---
import type { CollectionEntry } from "astro:content";
import { createHash } from "crypto";
import { CalendarFold } from "@lucide/astro";
import Layout from "./Layout.astro";

type Props = CollectionEntry<"blog">["data"];

type Author = {
  email: string;
  display: string;
};

type Authors = {
  [key: string]: Author;
};

const {
  title,
  description,
  tags,
  date: _date,
  authors: _authors,
} = Astro.props;
const authors: Authors = _authors;
const date: Date = new Date(_date);
---

<Layout title={`Auzzie.space - ${title}`}>
  <article class="mx-auto max-w-4xl px-4 py-8">
    <header class="mb-8">
      <h1 class="text-base-content mb-4 text-4xl font-bold">{title}</h1>
      <p class="text-base-content/70 mb-6 text-lg">{description}</p>

      <div class="space-y-4">
        <div class="flex flex-wrap items-center gap-4">
          {
            Object.entries(authors).map(([key, author]) => {
              const emailHash = createHash("sha256")
                .update(author.email.toLowerCase().trim())
                .digest("hex");
              const gravatarUrl = `https://www.gravatar.com/avatar/${emailHash}?s=256&d=identicon`;

              return (
                <div class="flex items-center gap-2">
                  <div class="avatar">
                    <div class="w-10 rounded-full">
                      <img
                        src={gravatarUrl}
                        alt={`${author.display}'s avatar`}
                      />
                    </div>
                  </div>
                  <span class="text-base-content font-medium">
                    {author.display}
                  </span>
                </div>
              );
            })
          }
        </div>

        <div
          class="text-base-content/60 flex flex-wrap items-center gap-4 text-sm"
        >
          <time class="flex items-center gap-1" datetime={date.toISOString()}>
            <CalendarFold class="inline" />
            {
              date.toLocaleDateString("en-AU", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })
            }
          </time>
        </div>

        {
          tags && tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {tags.map((tag: string) => (
                <span class="badge badge-secondary badge-sm">{tag}</span>
              ))}
            </div>
          )
        }
      </div>
    </header>

    <div class="prose prose-lg max-w-none">
      <slot />
    </div>
  </article>
</Layout>
