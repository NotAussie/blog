---
import { type CollectionEntry, getCollection } from "astro:content";
import { Globe } from "@lucide/astro";
import { Github, Bluesky, Mastodon } from "simple-icons-astro";
import Layout from "../../layouts/Layout.astro";
import Gravatar from "../../components/Gravatar.astro";

export async function getStaticPaths() {
  const authors = await getCollection("author");
  const posts = await getCollection("blog");
  return authors.map((author) => ({
    params: { slug: author.id.replace(/\.[^.]*$/, "") },
    props: {
      author,
      posts: posts.filter((post) =>
        post.data.authors.includes(author.id.replace(/\.[^.]*$/, "")),
      ),
    },
  }));
}

type Props = {
  author: CollectionEntry<"author">;
  posts: CollectionEntry<"blog">[];
};

const { author, posts } = Astro.props;

function getMastodonInstance() {
  if (!author.data.socials || !author.data.socials.mastodon) return null;

  const [username, instance] = author.data.socials.mastodon.split("@");
  return { username, instance };
}
---

<Layout title={author.data.display_name}>
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8 flex flex-col gap-6 md:flex-row">
      <div class="flex-shrink-0">
        <Gravatar
          email={author.data.email}
          alt={`${author.data.display_name}'s avatar`}
          class="h-32 w-32 rounded-full shadow-lg"
        />
      </div>

      <div class="flex-1">
        <h1 class="mb-2 text-4xl font-bold">{author.data.display_name}</h1>
        {
          author.data.pronouns && (
            <p class="mb-3 text-lg">({author.data.pronouns})</p>
          )
        }
        {
          author.data.description && (
            <p class="mb-4">{author.data.description}</p>
          )
        }

        {
          author.data.socials && (
            <div class="flex gap-3">
              {author.data.socials.bluesky && (
                <a
                  href={`https://bsky.app/profile/${author.data.socials.bluesky}`}
                  class="btn btn-outline btn-sm gap-2"
                >
                  <Bluesky class="inline h-4 w-4" />
                  Bluesky
                </a>
              )}
              {author.data.socials.mastodon && (
                <a
                  href={`https://mastodon.social/${author.data.socials.mastodon}`}
                  class="btn btn-outline btn-sm gap-2"
                >
                  <Mastodon class="inline h-4 w-4" />
                  Mastodon
                </a>
              )}
              {author.data.socials.github && (
                <a
                  href={`https://github.com/${author.data.socials.github}`}
                  class="btn btn-outline btn-sm gap-2"
                >
                  <Github class="inline h-4 w-4" />
                  GitHub
                </a>
              )}
              {author.data.socials.website && (
                <a
                  href={author.data.socials.website}
                  class="btn btn-outline btn-sm gap-2"
                >
                  <Globe class="inline h-4 w-4" />
                  Website
                </a>
              )}
            </div>
          )
        }
      </div>
    </div>

    {
      posts.length > 0 ? (
        <div class="mt-8">
          <h2 class="mb-4 text-2xl font-bold">Recent Posts</h2>
          <div class="max-h-96 overflow-y-auto rounded-lg border">
            <div class="space-y-4 p-4">
              {posts.map((post) => (
                <article class="border-b pb-4 last:border-b-0 last:pb-0">
                  <h3 class="mb-2 text-lg font-semibold">
                    <a
                      href={`/posts/${post.id.replace(/\.[^.]*$/, "")}`}
                      class="link link-hover"
                    >
                      {post.data.title}
                    </a>
                  </h3>
                  {post.data.description && (
                    <p class="mb-2 text-sm">{post.data.description}</p>
                  )}
                  <div class="flex items-center gap-4 text-sm">
                    <time datetime={post.data.date.toISOString()}>
                      {post.data.date.toLocaleDateString()}
                    </time>
                    {post.data.tags && (
                      <div class="flex gap-1">
                        {post.data.tags.slice(0, 3).map((tag) => (
                          <span class="badge badge-sm">{tag}</span>
                        ))}
                      </div>
                    )}
                  </div>
                </article>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <p>No posts yet.</p>
      )
    }
  </div>
</Layout>
